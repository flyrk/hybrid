// pages/tasks.tsx
import { useUser } from "@clerk/nextjs";
import type { NextPage } from "next";
import { api } from "~/utils/api";
import type { RouterInputs } from "~/utils/api";
import { useState } from 'react';
import toast from "react-hot-toast";
import { PageLayout } from "~/components/layout";
import Head from "next/head";
import { LoadingPage } from "~/components/loading";
import Image from "next/image";

type TaskWithUser = RouterInputs['tasks']['getAll'];

const CreateTaskWizard = () => {
  const { user } = useUser();

  const [tasks, setTasks] = useState<TaskWithUser[]>([]);
  const [name, setName] = useState('');
  const [url, setUrl] = useState('');

  const ctx = api.useContext();


  const { mutate, isLoading: isCreating } = api.tasks.create.useMutation({
    onSuccess: () => {
      setName('');
      setUrl('');
      void ctx.tasks.getAll.invalidate();
    },
    onError: (e) => {
      const errorMessage = e.data?.zodError?.fieldErrors.content;
      if (errorMessage && errorMessage[0]) {
        toast.error(errorMessage[0]);
      } else {
        toast.error('Fail to creat!');
      }
    }
  });

  const addTask = () => {
    try {
      mutate({
        name,
        url,
      });
    } catch (error) {
      console.error('Invalid task:', error);
    }
  };

  if (!user) return null;

  return (
    <div>
        <h1 className="text-2xl mb-4">任务列表</h1>
        <div>
          <input
            className="border border-gray-300 px-2 py-1 mr-2"
            type="text"
            value={name}
            onChange={(e) => setName(e.target.value)}
            placeholder="任务名称"
          />
          <input
            className="border border-gray-300 px-2 py-1 mr-2"
            type="text"
            value={url}
            onChange={(e) => setUrl(e.target.value)}
            placeholder="网址"
          />
          <button className="bg-blue-500 text-white px-4 py-1 rounded" disabled={isCreating} onClick={addTask}>
            执行
          </button>
        </div>
    </div>
  );
};

const TaskList = () => {
  const { data: tasks, isLoading: taskLoading } = api.tasks.getAll.useQuery();
  if (taskLoading) return <LoadingPage />;
  if (!tasks) return <div>Error</div>;

  return (
    <div className="w-full overflow-auto h-full mt-4">
      <table className="table-auto w-full">
        <thead className="bg-gray-200">
          <tr>
            <th className="px-4 py-2">任务名称</th>
            <th className="px-4 py-2">网址</th>
            <th className="px-4 py-2">创建时间</th>
            <th className="px-4 py-2">创建者</th>
          </tr>
        </thead>
        <tbody>
          {tasks.map(({ task, author }, index) => (
            <tr key={task.id} className={index % 2 === 0 ? 'bg-gray-100' : ''}>
              <td className="border px-4 py-2">{task.name}</td>
              <td className="border px-4 py-2">
                <a href={task.url} target="_blank" rel="noopener noreferrer">
                  {task.url}
                </a>
              </td>
              <td className="border px-4 py-2">
                {new Date(task.createdAt).toLocaleString()}
              </td>
              <td className="border px-4 py-2 flex items-center">
                <Image
                  src={author?.profileImageUrl ?? ''}
                  alt={`${author?.username ?? ''}'s avator`}
                  className="rounded-full mr-1"
                  width={16}
                  height={16}
                />
                <span>{author?.username}</span>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

// type PageProps = InferGetStaticPropsType<typeof getStaticProps>;
const Tasks : NextPage = () => {
  const { isLoaded: userLoaded, isSignedIn } = useUser();

  if (!userLoaded) return <div></div>;
  return (
    <>
      <Head>
        <title>StyleStride Task</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <PageLayout>
        {
          isSignedIn ? (
            <div className="border-b border-slate-400 p-4 flex justify-center flex-col">
              <CreateTaskWizard />
              <TaskList />
            </div>
          ) : (
            <div>Please Sign In to See Tasks.</div>
          )
        }
      </PageLayout>
    </>
  );
};

// export const getStaticProps: GetStaticProps = async () => {
//   const ssg = createServerSideHelpers({
//     router: appRouter,
//     ctx: {
//       prisma,
//       userId: null,
//     },
//     transformer: superjson,
//   });

//   await ssg.tasks.getAll.prefetch();

//   return {
//     props: {
//       trpcState: ssg.dehydrate(),
//     },
//   }
// };

export default Tasks;
